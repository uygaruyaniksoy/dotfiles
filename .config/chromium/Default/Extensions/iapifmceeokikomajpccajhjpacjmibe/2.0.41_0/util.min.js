class Logger{static log(t){console.log(t)}static error(t){console.error(t)}}class Notify{static getXpathURL(){return Storage.getItem("informations").xPathURL}static getMailURL(){return this.manifest=JSON.parse(localStorage.manifest),`mailto:${this.getEmail()}?subject=${this.getSubject()}&Body=${this.getBody()}`}static getEmail(){return this.manifest.email}static getSubject(){return this.manifest.name+" "+this.manifest.version}static getBody(){return this.body}static mailFailure(t,e,s){this.body=s,this.sendMessage(t,e,this.getMailURL())}static xPathFailure(t,e){this.sendMessage(t,e,this.getXpathURL())}static sendMessage(t,e,s){browser.runtime.sendMessage({action:"notify",title:t,message:e,url:s})}}class Rest{constructor(){this.url=Storage.getItem("manifest").restURL,this.services=["examples","informations","test","versions"],this.services.forEach(t=>{this[t]=(()=>this.ajax(`${this.url}${t}.json`,t))})}init(){return this.services.forEach(t=>{this[t]()}),this.examples()}static getInst(){return this.inst||(this.inst=new Rest)}ajax(t,e){return new Promise((s,a)=>{localStorage.getItem(e)&&"versions"!=e?s(localStorage.getItem(e)):Util.ajax(t).then(t=>{if("test"==e){if((t=JSON.parse(t))[0].date){let e=new Date;e.setHours(0,0,0,0),t=t.filter(t=>new Date(t.date)>=e).map(t=>t.email)}t=JSON.stringify(t)}localStorage.setItem(e,t),s(t)}).catch(a)})}}class Storage{static setItem(t,e){localStorage.setItem(t,JSON.stringify(e))}static getItem(t){return JSON.parse(localStorage.getItem(t))}static removeItem(t){localStorage.removeItem(t)}}class Util{static ajax(t,e){return new Promise((s,a)=>{const i=new XMLHttpRequest;for(key in i.open("GET",t),e)i.setRequestHeader(key,e[key]);i.onerror=(()=>a(i.statusText)),i.onreadystatechange=function(){4==this.readyState&&(200==this.status?s(this.responseText):a(this.responseText))},i.send()})}}